# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  uuid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  twoFactorEnabled: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AuthTokens {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
}

type RequestResetPasswordResponse {
  emailSent: Boolean!
}

type ResetPasswordResponse {
  success: Boolean!
}

type SetupTwoFactorCodeResponse {
  emailSent: Boolean!
}

type AuthResponse {
  user: User!
  authTokens: AuthTokens
}

type UserResponse {
  user: User!
}

type ImageUpload {
  uuid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  fileName: String!
  fileType: String!
  containers: [Container!]
}

type Container {
  uuid: String!
  createdAt: DateTime!
  updatedAt: DateTime!

  """Type of the container"""
  type: ContainerType!

  """Dirth depth of the container"""
  dirtDepth: Float!
  user: User
  thumbnail: ImageUpload
}

"""The type of a conatiner"""
enum ContainerType {
  Plot
  Bag
  Patch
}

type Error {
  field: String!
  message: String!
}

type ContainerResponse {
  container: Container
  errors: [Error!]
}

type ContainersResponse {
  containers: [Container!]
  errors: [Error!]
}

type DeleteObjectResponse {
  deleted: Boolean
  errors: [Error!]
}

type Plant {
  uuid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: PlantType!
  variety: String!
  seedsPlantedAt: DateTime!
  seedsSproutedAt: DateTime!
  container: Container
}

"""Used for declaring the type of plant."""
enum PlantType {
  NONE
  TOMATO
  POTATO
  CARROT
  ONION
  CUCUMBER
  PEPPER
  PEA
  BROCCOLI
  CABBAGE
  CORN
  BEAN
  BEET
  CELERY
  EGGPLANT
  GARLIC
  GINGER
  GREEN_BEAN
  KALE
  LETTUCE
  MUSTARD
  SQUASH
  WATERMELON
}

type PlantsResponse {
  plants: [Plant!]
  count: Int!
  cursor: String!
  hasMore: Boolean!
}

type ContainerStatsResponse {
  plantsCount: Int
  harvestsCount: Int
  grossProduce: Float
}

type ContainerHarvest {
  date: DateTime!
  weight: Float!
}

type ContainerHarvestsResponse {
  harvests: [ContainerHarvest!]!
}

type BestPerformingContainer {
  uuid: String!
  createdAt: DateTime!
  updatedAt: DateTime!

  """Type of the container"""
  type: ContainerType!

  """Dirth depth of the container"""
  dirtDepth: Float!
  user: User
  thumbnail: ImageUpload
  totalHarvestsWeight: Float!
}

type BestPerformingContainersResponse {
  containers: [BestPerformingContainer!]
}

type Harvest {
  uuid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  quantity: Int!
  weight: Float!
  plant: Plant
}

type HarvestResponse {
  harvest: Harvest
  errors: [Error!]
}

type HarvestsResponse {
  harvests: [Harvest!]
  count: Int!
  cursor: String!
  hasMore: Boolean!
}

type HeightRegistration {
  uuid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  height: Float!
  plant: Plant
}

type HeightRegistrationResponse {
  heightRegistration: HeightRegistration
  errors: [Error!]
}

type HeightRegistrationsResponse {
  heightRegistrations: [HeightRegistration!]
  errors: [Error!]
}

type PlantResponse {
  plant: Plant
  errors: [Error!]
}

type Weather {
  time: String!
  weatherCode: Int!
  temperatureMax: Float!
  temperatureMin: Float!
  uvIndexMax: Float!
  precipitationSum: Float!
  windSpeedMax: Float!
  windDirectionDominant: Float!
}

type WeatherForecastResponse {
  forecast: [Weather!]!
}

type Query {
  me: User!
  findUser(input: FindUserInput!): UserResponse!
  authCheck: Boolean!
  findContainer(input: FindContainerInput!): ContainerResponse!
  findContainers(input: FindContainerInput!): ContainersResponse!
  findContainerPlants(input: FindContainerPlantsInput!): PlantsResponse!
  findUserContainers(input: FindUserContainersInput!): ContainersResponse!
  calculateContainerStats(input: FindContainerInput!): ContainerStatsResponse!
  findContainerHarvests(input: FindContainerInput!): ContainerHarvestsResponse!
  findBestPerformingContainers(input: FindBestPerformingContainersInput!): BestPerformingContainersResponse!
  findPlant(input: FindPlantInput!): PlantResponse!
  findPlants(input: FindPlantsInput!): PlantsResponse!
  findHeightRegistration(input: FindHeightRegistrationInput!): HeightRegistrationResponse!
  findHeightRegistrations(input: FindHeightRegistrationsInput!): HeightRegistrationsResponse!
  findPlantHeightRegistrations(input: FindPlantInput!): HeightRegistrationsResponse!
  findHarvest(input: FindHarvestInput!): HarvestResponse!
  findHarvests(input: FindHarvestsInput!): HarvestsResponse!
  findPlantHarvests(input: FindPlantHarvestsInput!): HarvestsResponse!
  findLatestsHarvests(input: FindLatestsHarvestsInput!): HarvestsResponse!
  findWeekHarvests(input: FindWeekHarvestsInput!): HarvestsResponse!
  getWeatherForecast(input: WeatherForecastInput!): WeatherForecastResponse!
}

input FindUserInput {
  uuid: String!
}

input FindContainerInput {
  uuid: String!
}

input FindContainerPlantsInput {
  where: FindContainerInput!
  take: Int
  cursor: String
}

input FindUserContainersInput {
  userUuid: String!
}

input FindBestPerformingContainersInput {
  userUuid: String!
  take: Int!
}

input FindPlantInput {
  uuid: String
  variety: String
  type: PlantType
}

input FindPlantsInput {
  where: FindPlantInput
  take: Int
  cursor: String
}

input FindHeightRegistrationInput {
  uuid: String
  height: Float
}

input FindHeightRegistrationsInput {
  take: Int!
  includePlant: Boolean!
}

input FindHarvestInput {
  uuid: String!
}

input FindHarvestsInput {
  where: FindHarvestInput
  take: Int
  cursor: String
  includePlant: Boolean!
}

input FindPlantHarvestsInput {
  where: FindPlantInput
  take: Int
  cursor: String
}

input FindLatestsHarvestsInput {
  userUuid: String!
  take: Int
  includePlant: Boolean!
}

input FindWeekHarvestsInput {
  userUuid: String!
}

input WeatherForecastInput {
  latitude: Float!
  longitude: Float!
}

type Mutation {
  refreshToken: Boolean!
  updateUser(input: UpdateUserInput!): UserResponse!
  signUp(input: SignUpInput!): AuthResponse!
  login(input: LoginInput!): AuthResponse!
  logOut: Boolean!
  setupTwoFactorCode(input: SetupTwoFactorCodeInput!): SetupTwoFactorCodeResponse!
  requestResetPassword(input: RequestResetPasswordInput!): RequestResetPasswordResponse!
  resetPassword(input: ResetPasswordInput!): ResetPasswordResponse!
  createContainer(input: CreateContainerInput!): ContainerResponse!
  deleteContainer(input: FindContainerInput!): DeleteObjectResponse!
  addPlantToContainer(input: AddPlantToContainerInput!): ContainerResponse!
  removePlantFromContainer(input: RemovePlantFromContainerInput!): DeleteObjectResponse!
  updateContainer(input: UpdateContainerInput!): ContainerResponse!
  createPlant(input: CreatePlantInput!): PlantResponse!
  deletePlant(input: FindPlantInput!): DeleteObjectResponse!
  updatePlant(input: UpdatePlantInput!): PlantResponse!
  createHeightRegistration(input: CreateHeightRegistrationInput!): HeightRegistrationResponse!
  deleteHeightRegistration(find: FindHeightRegistrationInput!): DeleteObjectResponse!
  createHarvest(input: CreateHarvestInput!): HarvestResponse!
  deleteHarvest(input: FindHarvestInput!): DeleteObjectResponse!
  updateHarvest(input: UpdateHarvestInput!): HarvestResponse!
}

input UpdateUserInput {
  uuid: String!
  username: String
}

input SignUpInput {
  username: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
  twoFactorCode: String!
}

input SetupTwoFactorCodeInput {
  email: String!
}

input RequestResetPasswordInput {
  email: String!
}

input ResetPasswordInput {
  password: String!
  token: String!
  twoFactorCode: String!
}

input CreateContainerInput {
  """Owner of the container"""
  userUuid: String!

  """Type of the container"""
  type: ContainerType!

  """Dirth depth of the container"""
  dirtDepth: Float!
  thumbnail: Upload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AddPlantToContainerInput {
  containerUuid: String!
  plantUuid: String!
}

input RemovePlantFromContainerInput {
  containerUuid: String!
  plantUuid: String!
}

input UpdateContainerInput {
  uuid: String!

  """Type of the container"""
  type: ContainerType

  """Dirth depth of the container"""
  dirtDepth: Float
}

input CreatePlantInput {
  container: FindContainerInput!
  variety: String!
  type: PlantType!
  seedsPlantedAt: DateTime
  seedsSproutedAt: DateTime
}

input UpdatePlantInput {
  uuid: String!
  variety: String
  type: PlantType
  seedsPlantedAt: DateTime
  seedsSproutedAt: DateTime
}

input CreateHeightRegistrationInput {
  plantUuid: String!
  height: Float!
}

input CreateHarvestInput {
  plant: FindPlantInput!
  quantity: Int!
  weight: Float!
}

input UpdateHarvestInput {
  uuid: String!
  quantity: Int
  weight: Float
}