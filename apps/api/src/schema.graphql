# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddPlantToContainerInput {
  containerUuid: String!
  plantUuid: String!
}

type Container {
  createdAt: DateTime!

  """Dirth depth of the container"""
  dirtDepth: Float!

  """Type of the container"""
  type: ContainerType!
  updatedAt: DateTime!
  user: User
  uuid: String!
}

type ContainerResponse {
  container: Container
  errors: [Error!]
}

"""The type of a conatiner"""
enum ContainerType {
  Bag
  Plot
}

type ContainersResponse {
  containers: [Container!]
  errors: [Error!]
}

input CreateContainerInput {
  """Dirth depth of the container"""
  dirtDepth: Float!

  """Type of the container"""
  type: ContainerType!

  """Owner of the container"""
  userUuid: String!
}

input CreateHeightRegistrationInput {
  height: Float!
  plantUuid: String!
}

input CreatePlantInput {
  container: FindContainerInput!
  plantedSeedsOn: DateTime
  seedsSproutedOn: DateTime
  type: PlantType!
  variety: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteObjectResponse {
  deleted: Boolean
  errors: [Error!]
}

type Error {
  field: String!
  message: String!
}

input FindContainerInput {
  uuid: String!
}

input FindHeightRegistrationInput {
  height: Float
  uuid: String
}

input FindPlantInput {
  uuid: String!
}

input FindUserContainersInput {
  userUuid: String!
}

input FindUserInput {
  uuid: String!
}

type HeightRegistration {
  createdAt: DateTime!
  height: Float
  plant: Plant
  updatedAt: DateTime!
  uuid: String!
}

type HeightRegistrationResponse {
  errors: [Error!]
  heightRegistration: HeightRegistration
}

type HeightRegistrationsResponse {
  errors: [Error!]
  heightRegistrations: [HeightRegistration!]
}

type Mutation {
  addPlantToContainer(input: AddPlantToContainerInput!): ContainerResponse!
  createContainer(input: CreateContainerInput!): ContainerResponse!
  createHeightRegistration(input: CreateHeightRegistrationInput!): HeightRegistrationResponse!
  createPlant(input: CreatePlantInput!): PlantResponse!
  deleteContainer(input: FindContainerInput!): DeleteObjectResponse!
  deleteHeightRegistration(find: FindHeightRegistrationInput!): DeleteObjectResponse!
  deletePlant(input: FindPlantInput!): DeleteObjectResponse!
  removePlantFromContainer(input: RemovePlantFromContainerInput!): DeleteObjectResponse!
  updatePlant(input: UpdatePlantInput!): PlantResponse!
}

type Plant {
  container: Container
  createdAt: DateTime!
  plantedSeedsOn: DateTime
  seedsSproutedOn: DateTime
  type: PlantType
  updatedAt: DateTime!
  uuid: String!
  variety: String
}

type PlantResponse {
  errors: [Error!]
  plant: Plant
}

"""Used for declaring the type of plant."""
enum PlantType {
  BEAN
  BEET
  BROCCOLI
  CABBAGE
  CARROT
  CELERY
  CORN
  CUCUMBER
  EGGPLANT
  GARLIC
  GINGER
  GREEN_BEAN
  KALE
  LETTUCE
  MUSTARD
  NONE
  ONION
  PEA
  PEPPER
  POTATO
  SQUASH
  TOMATO
  WATERMELON
}

type PlantsResponse {
  errors: [Error!]
  plants: [Plant!]
}

type Query {
  findContainer(input: FindContainerInput!): ContainerResponse!
  findContainers(input: FindContainerInput!): ContainersResponse!
  findHeightRegistration(find: FindHeightRegistrationInput!): HeightRegistrationResponse!
  findPlant(input: FindPlantInput!): PlantResponse!
  findPlantHeightRegistrations(find: FindPlantInput!): HeightRegistrationsResponse!
  findPlants(input: FindPlantInput!): PlantsResponse!
  findUser(input: FindUserInput!): UserResponse!
  findUserContainers(input: FindUserContainersInput!): ContainersResponse!
  me: UserResponse!
}

input RemovePlantFromContainerInput {
  containerUuid: String!
  plantUuid: String!
}

input UpdatePlantInput {
  data: UpdatePlantInputData!
  find: FindPlantInput!
}

input UpdatePlantInputData {
  plantedSeedsOn: DateTime
  seedsSproutedOn: DateTime
  type: PlantType
  variety: String
}

type User {
  avatar: String!
  createdAt: DateTime!
  oauthId: String!
  updatedAt: DateTime!
  username: String!
  uuid: String!
}

type UserResponse {
  errors: [Error!]
  user: User
}