datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  uuid     String @id @default(cuid())
  username String @unique

  email         String  @unique
  emailVerified Boolean @default(false)

  password      String
  passwordReset PasswordReset?
  refreshTokens RefreshToken[]

  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?

  containers Container[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordReset {
  token String @id @db.Char(21)

  userId String @unique
  user   User   @relation(fields: [userId], references: [uuid], onDelete: Cascade)

  validUntil DateTime @default(dbgenerated("(timezone('utc'::text, now()) + '1 days'::interval)")) @db.Timestamp(6)
}

model RefreshToken {
  uuid String @id @default(cuid())

  revoked Boolean @default(false)

  user     User   @relation(fields: [userUuid], references: [uuid])
  userUuid String

  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userUuid])
}

enum ContainerType {
  Plot
  Bag
  Patch
}

model Container {
  uuid      String        @id @default(cuid())
  type      ContainerType
  dirtDepth Float         @default(0)

  user     User   @relation(fields: [userUuid], references: [uuid])
  userUuid String

  plants Plant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userUuid])
}

enum PlantType {
  NONE
  TOMATO
  POTATO
  CARROT
  ONION
  CUCUMBER
  PEPPER
  PEA
  BROCCOLI
  CABBAGE
  CORN
  BEAN
  BEET
  CELERY
  EGGPLANT
  GARLIC
  GINGER
  GREEN_BEAN
  KALE
  LETTUCE
  MUSTARD
  SQUASH
  WATERMELON
}

model Plant {
  uuid    String    @id @default(cuid())
  variety String
  type    PlantType

  seedsPlantedAt  DateTime @default(now())
  seedsSproutedAt DateTime @default(now())

  container     Container @relation(fields: [containerUuid], references: [uuid])
  containerUuid String

  heightRegistrations HeightRegistration[]

  harvests Harvest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([containerUuid])
}

model HeightRegistration {
  uuid   String @id @default(cuid())
  height Float  @default(0)

  plant     Plant  @relation(fields: [plantUuid], references: [uuid])
  plantUuid String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([plantUuid])
}

model Harvest {
  uuid String @id @default(cuid())

  quantity Int
  weight   Float

  plant     Plant  @relation(fields: [plantUuid], references: [uuid])
  plantUuid String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([plantUuid])
}
